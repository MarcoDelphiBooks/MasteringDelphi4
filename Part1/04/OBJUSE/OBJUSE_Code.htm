<HTML><HEAD>
<TITLE>Project: OBJUSE.DPR</TITLE>
<META NAME="GENERATOR" CONTENT="PasToHTML[Marco Cantù]">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<CENTER><I>Marco Cant&ugrave; 1998, Mastering Delphi 4</I></CENTER>
<H1><CENTER>Project: OBJUSE.DPR</CENTER></H1><HR>
<H3>Project Structure</H3><UL>
<LI> <A HREF=#OBJUSE.DPR> OBJUSE.DPR</A>
<LI> <A HREF=#OBJUSEF.PAS> OBJUSEF.PAS</A>
<LI> <A HREF=#DATES.PAS> DATES.PAS</A>
<LI> <A HREF=#OBJUSEF.DFM> OBJUSEF.DFM</A>
</UL>
<HR>
<A NAME=OBJUSE.DPR><H3>OBJUSE.DPR</H3></A>

<PRE>
<B>program</B> Objuse;

<B>uses</B>
  Forms,
  ObjUseF <B>in</B> <I>'ObjUseF.pas'</I> <FONT COLOR="#000080"><I>{Form1}</I></FONT>,
  Dates <B>in</B> <I>'DATES.PAS'</I>;

<FONT COLOR="#000080"><I>{$R *.RES}</I></FONT>

<B>begin</B>
  Application.CreateForm(TForm1, Form1);
  Application.Run;
<B>end</B>.</PRE>
<HR>

<A NAME=OBJUSEF.PAS><H3>OBJUSEF.PAS</H3></A>

<PRE>
<B>unit</B> ObjUseF;

<B>interface</B>

<B>uses</B>
  SysUtils, Windows, Messages, Classes, Graphics, Controls,
  Forms, Dialogs, Dates, StdCtrls;

<B>type</B>
  TForm1 = <B>class</B>(TForm)
    ShowButton: TButton;
    ListBox1: TListBox;
    <B>procedure</B> ShowButtonClick(Sender: TObject);
  <B>private</B>
    <B>procedure</B> ShowInfo (Obj: TObject);
  <B>public</B>
    <FONT COLOR="#000080"><I>{ Public declarations }</I></FONT>
  <B>end</B>;

<B>var</B>
  Form1: TForm1;

<B>implementation</B>

<FONT COLOR="#000080"><I>{$R *.DFM}</I></FONT>

<B>procedure</B> TForm1.ShowInfo (Obj: TObject);
<B>begin</B>
  <FONT COLOR="#000080"><I>// add class name</I></FONT>
  ListBox1.Items.Add (<I>'Class Name: '</I> + Obj.ClassName);
  <FONT COLOR="#000080"><I>// add parent class name, if any</I></FONT>
  <B>if</B> Obj.ClassParent &lt;&gt; <B>nil</B> <B>then</B>
  <B>begin</B>
    ListBox1.Items.Add (<I>'Parent Class Name: '</I> +
      Obj.ClassParent.ClassName);
    <FONT COLOR="#000080"><I>// add grandparent class name, if any</I></FONT>
    <B>if</B> Obj.ClassParent.ClassParent &lt;&gt; <B>nil</B> <B>then</B>
      ListBox1.Items.Add (<I>'Grandparent Class Name: '</I> +
        Obj.ClassParent.ClassParent.ClassName);
  <B>end</B>;
  <FONT COLOR="#000080"><I>// add the size of object and reference</I></FONT>
  ListBox1.Items.Add (<I>'Object Size: '</I> +
    IntToStr (Obj.InstanceSize));
  ListBox1.Items.Add (<I>'Reference Size: '</I> +
    IntToStr (SizeOf (Obj)));
  <FONT COLOR="#000080"><I>// indicate if this is a component or not</I></FONT>
  <B>if</B> Obj.InheritsFrom (TComponent) <B>then</B>
    ListBox1.Items.Add (<I>'This is a component'</I>)
  <B>else</B>
    ListBox1.Items.Add (<I>'This is NOT a component'</I>);
<B>end</B>;

<B>procedure</B> TForm1.ShowButtonClick(Sender: TObject);
<B>var</B>
  Day: TDate;
<B>begin</B>
  <FONT COLOR="#000080"><I>{create an instance and show some information}</I></FONT>
  Day := TDate.Create (1998, 12, 15);
  ShowInfo (Day);
  ListBox1.Items.Add (<I>''</I>);

  <FONT COLOR="#000080"><I>{show the same information about
  the form and the sender, the button}</I></FONT>
  ShowInfo (self);
  ListBox1.Items.Add (<I>''</I>);
  ShowInfo (Canvas);

  <FONT COLOR="#000080"><I>{free memory}</I></FONT>
  Day.Free;

  <FONT COLOR="#000080"><I>{disable the button, to avoid a second click}</I></FONT>
  ShowButton.Enabled := False;
<B>end</B>;

<B>end</B>.</PRE>
<HR>

<A NAME=DATES.PAS><H3>DATES.PAS</H3></A>

<PRE>
<B>unit</B> Dates;

<B>interface</B>

<B>uses</B>
  Classes, SysUtils;

<B>type</B>
  TDate = <B>class</B> (TComponent)
  <B>private</B>
    fDate: TDateTime;
    FOnChange: TNotifyEvent;
    <B>function</B> GetYear: Integer;
    <B>function</B> GetDay: Integer;
    <B>function</B> GetMonth: Integer;
    <B>procedure</B> SetDay(<B>const</B> Value: Integer);
    <B>procedure</B> SetMonth(<B>const</B> Value: Integer);
    <B>procedure</B> SetYear(<B>const</B> Value: Integer);
  <B>protected</B>
    <B>procedure</B> DoChange; <B>virtual</B>;
  <B>public</B>
    <B>constructor</B> Create (AOwner: TComponent); <B>overload</B>; <B>override</B>;
    <B>constructor</B> Create (y, m, d: Integer); <B>reintroduce</B>; <B>overload</B>;
    <B>procedure</B> SetValue (y, m, d: Integer); <B>overload</B>;
    <B>procedure</B> SetValue (NewDate: TDateTime); <B>overload</B>;
    <B>function</B> LeapYear: Boolean;
    <B>procedure</B> Increase (NumberOfDays: Integer = 1);
    <B>procedure</B> Decrease (NumberOfDays: Integer = 1);
    <B>function</B> GetText: <B>string</B>; <B>virtual</B>;
    <B>property</B> Text: <B>string</B> <B>read</B> GetText;
  <B>published</B>
    <B>property</B> Day: Integer <B>read</B> GetDay <B>write</B> SetDay;
    <B>property</B> Month: Integer <B>read</B> GetMonth <B>write</B> SetMonth;
    <B>property</B> Year: Integer <B>read</B> GetYear <B>write</B> SetYear;
    <B>property</B> OnChange: TNotifyEvent
      <B>read</B> FonChange <B>write</B> FOnChange;
  <B>end</B>;

  <FONT COLOR="#000080"><I>// custom exception</I></FONT>
  EDateOutOfRange = <B>class</B> (Exception)
  <B>end</B>;

<B>procedure</B> <B>Register</B>;

<B>implementation</B>

<B>procedure</B> TDate.SetValue (y, m, d: Integer);
<B>begin</B>
  fDate := EncodeDate (y, m, d);
  <FONT COLOR="#000080"><I>// fire the event</I></FONT>
  DoChange;
<B>end</B>;

<B>function</B> TDate.LeapYear: Boolean;
<B>begin</B>
  <FONT COLOR="#000080"><I>// compute leap years, considering &quot;exceptions&quot;</I></FONT>
  <B>if</B> (GetYear <B>mod</B> 4 &lt;&gt; 0) <B>then</B>
    LeapYear := False
  <B>else</B> <B>if</B> (GetYear <B>mod</B> 100 &lt;&gt; 0) <B>then</B>
    LeapYear := True
  <B>else</B> <B>if</B> (GetYear <B>mod</B> 400 &lt;&gt; 0) <B>then</B>
    LeapYear := False
  <B>else</B>
    LeapYear := True;
<B>end</B>;

<B>procedure</B> TDate.Increase (NumberOfDays: Integer = 1);
<B>begin</B>
  fDate := fDate + NumberOfDays;
  <FONT COLOR="#000080"><I>// fire the event</I></FONT>
  DoChange;
<B>end</B>;

<B>function</B> TDate.GetText: <B>string</B>;
<B>begin</B>
  GetText := DateToStr (fDate);
<B>end</B>;

<B>procedure</B> TDate.Decrease (NumberOfDays: Integer = 1);
<B>begin</B>
  fDate := fDate - NumberOfDays;
  <FONT COLOR="#000080"><I>// fire the event</I></FONT>
  DoChange;
<B>end</B>;

<B>constructor</B> TDate.Create (y, m, d: Integer);
<B>begin</B>
  fDate := EncodeDate (y, m, d);
<B>end</B>;

<B>constructor</B> TDate.Create (AOwner: TComponent);
<B>begin</B>
  <B>inherited</B> Create (AOwner);
  <FONT COLOR="#000080"><I>// today...</I></FONT>
  fDate := Date;
<B>end</B>;

<B>function</B> TDate.GetYear: Integer;
<B>var</B>
  y, m, d: Word;
<B>begin</B>
  DecodeDate (fDate, y, m, d);
  Result := y;
<B>end</B>;

<B>procedure</B> TDate.SetValue(NewDate: TDateTime);
<B>begin</B>
  fDate := NewDate;
  <FONT COLOR="#000080"><I>// fire the event</I></FONT>
  DoChange;
<B>end</B>;

<B>function</B> TDate.GetDay: Integer;
<B>var</B>
  y, m, d: Word;
<B>begin</B>
  DecodeDate (fDate, y, m, d);
  Result := d;
<B>end</B>;

<B>function</B> TDate.GetMonth: Integer;
<B>var</B>
  y, m, d: Word;
<B>begin</B>
  DecodeDate (fDate, y, m, d);
  Result := m;
<B>end</B>;

<B>procedure</B> TDate.SetDay(<B>const</B> Value: Integer);
<B>begin</B>
  <B>if</B> (Value &lt; 0) <B>or</B> (Value &gt; 31) <B>then</B>
    <B>raise</B> EDateOutOfRange.Create (<I>'Invalid month'</I>);
  SetValue (Year, Month, Value);
<B>end</B>;

<B>procedure</B> TDate.SetMonth(<B>const</B> Value: Integer);
<B>begin</B>
  <B>if</B> (Value &lt; 0) <B>or</B> (Value &gt; 12) <B>then</B>
    <B>raise</B> EDateOutOfRange.Create (<I>'Invalid month'</I>);
  SetValue (Year, Value, Day);
<B>end</B>;

<B>procedure</B> TDate.SetYear(<B>const</B> Value: Integer);
<B>begin</B>
  SetValue (Value, Month, Day);
<B>end</B>;

<B>procedure</B> TDate.DoChange;
<B>begin</B>
  <B>if</B> Assigned (FOnChange) <B>then</B>
    FOnChange (self);
<B>end</B>;

<B>procedure</B> <B>Register</B>;
<B>begin</B>
  RegisterComponents (<I>'Md4'</I>, [TDate]);
<B>end</B>;

<B>end</B>.</PRE>
<HR>

<A NAME=OBJUSEF.DFM><H3>OBJUSEF.DFM</H3></A>

<PRE>
<B>object</B> Form1: TForm1
  Left = 197
  Top = 107
  Width = 413
  Height = 342
  ActiveControl = ShowButton
  Caption = <I>'Obj Use'</I>
  Color = clBtnFace
  Font.Charset = DEFAULT_CHARSET
  Font.Color = clWindowText
  Font.Height = -11
  Font.Name = <I>'MS Sans Serif'</I>
  Font.Style = []
  OldCreateOrder = True
  PixelsPerInch = 96
  TextHeight = 13
  <B>object</B> ShowButton: TButton
    Left = 328
    Top = 16
    Width = 65
    Height = 33
    Caption = <I>'&amp;Show'</I>
    TabOrder = 0
    OnClick = ShowButtonClick
  <B>end</B>
  <B>object</B> ListBox1: TListBox
    Left = 16
    Top = 16
    Width = 297
    Height = 281
    ItemHeight = 13
    TabOrder = 1
  <B>end</B>
<B>end</B></PRE>
<HR>

<BR><I><CENTER>Copyright Marco Cant&ugrave; 1998</CENTER></I>
</BODY> </HTML>